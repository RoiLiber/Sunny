{"version":3,"sources":["serviceWorker.js","actions/actionTypes.js","reducers/mainReducer.js","rootReducer.js","store.js","consts.js","actions/mainActions.js","api.js","components/Header/Header.js","components/Header/index.js","styles/colorsVar.js","components/AutoComplete/AutoComplete.js","components/AutoComplete/index.js","components/CurrentWeather/index.js","components/CurrentWeather/CurrentWeather.js","components/WeatherDetails/index.js","components/WeatherDetails/WeatherDetails.js","components/Forecast/index.js","components/Forecast/Forecast.js","components/UI/RainEffect/index.js","components/UI/Lightning/index.js","components/UI/WeatherIcons/index.js","components/HomePage/index.js","components/HomePage/HomePage.js","components/Favorites/index.js","components/Favorites/Favorites.js","components/UI/Message/Message.js","containers/WeatherApp/index.js","containers/WeatherApp/WeatherApp.js","App.js","index.js","assets/icon/logos/icon.png"],"names":["Boolean","window","location","hostname","match","actionTypes","setCity","setCityDetails","setFavoriteCities","removeFavoriteCity","updateFavorites","tampToggle","setDarkMode","setGeoLocationApproval","setError","favoritesCity","localStorage","getItem","metricPreferences","darkModePreferences","geoLocationApproved","initialState","Immutable","city","cityDetails","currWeatherInfo","forecast","favoriteCities","JSON","parse","metric","darkMode","geoLocation","apiError","handleActions","types","state","value","setIn","key","favorites","set","bool","err","rootReducer","combineReducers","mainReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","weatherUrl","imageUrl","ERROR_MSG","ROUTES","API_KEY","process","REACT_APP_API_KEY","type","setTampMetric","setItem","stringify","getState","newFavList","filter","fetchCityWeather","a","fetch","response","json","currentWeatherDetails","Message","WeatherText","Temperature","WeatherIcon","weatherImage","toString","padStart","tempC","get","tempF","description","img","updateCurrentCityWeather","dispatch","geoLocationCity","geo","ParentCity","Country","Key","LocalizedName","country","cityConfig","label","fetchAutoCompleteOptions","cities","fetchForecastDetails","metricBool","DailyForecasts","map","day","date","Date","temp","min","max","dayTemp","icon","Day","text","updateForecast","withRouter","Header","props","pathname","useSelector","useEffect","console","log","className","src","logo","alt","to","Button","variant","reg","withStyles","AutoComplete","textField","borderColor","colors","invisible","display","paper","backgroundColor","classes","useDispatch","useState","open","setOpen","options","setOptions","isError","setIsError","citySearch","setCitySearch","loading","length","e","Autocomplete","onClose","onChange","onInputChange","getOptionLabel","option","popupIndicator","renderInput","params","TextField","placeholder","fullWidth","test","target","helperText","InputProps","root","endAdornment","CircularProgress","color","size","CurrentWeather","cityName","degree","Math","round","ButtonGroup","disableElevation","onClick","WeatherDetails","dayDetails","currDay","index","minTemp","maxTemp","cascade","delay","split","Forecast","item","i","uuidv4","Rain","level","iStyle","topNum","floor","random","randomTopNum","topPx","randomLeftNum","left","top","Array","el","style","Lightning","getTimestamp","getTime","unsigned","lightningCanvas","document","getElementById","ctx","getContext","cloudLightningCanvas","clCtx","lightningSheetCanvas","lsCtx","lightning","cloudLightning","flashes","lightningSheets","stageWidth","stageHeight","previousTimestamp","ox","oy","width","isBranch","branchDirection","newCloud","x","y","this","paths","red","green","blue","alpha","hasEnded","xDeviation","flickerCount","clouds","push","Flash","CloudLightning","newLines","branchChance","newX","newY","previousPoint","getLastPoint","lastX","lastY","MAX_POINTS","FADE_INCREMENT","cloud","colour","getColour","beginPath","strokeStyle","lineWidth","shadowBlur","shadowColor","forEach","path","lineTo","stroke","lastPoint","flash","fillStyle","fillRect","LightningSheet","isRoot","sheetX","sheetY","save","scale","arc","PI","closePath","restore","fill","updateCanvasSize","innerWidth","innerHeight","height","$","on","clientX","clientY","resize","loop","clearRect","animate","render","lightningSheet","sheet","requestAnimationFrame","lightningStart","id","weatherDescription","lightMode","RainEffect","LightningEffect","HomePage","isLoader","setIsLoader","getCityWeather","isCityInFav","find","favCity","renderFavoriteIcon","Favorites","favCitiesInfo","setFavCitiesInfo","Promise","all","citiesInfo","reduce","acc","info","Object","keys","Error","renderCities","tamp","role","tabIndex","history","handleCityClick","forever","duration","btnText","WeatherApp","exect","component","App","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.dad6a9f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const actionTypes = {\r\n    setCity: 'SET_CITY',\r\n    setCityDetails: 'SET_CITY_DETAILS',\r\n    setFavoriteCities: 'SET_FAVORITE_CITIES',\r\n    removeFavoriteCity: 'REMOVE_FAVORITE_CITY',\r\n    updateFavorites: 'UPDATE_FAVORITES',\r\n    tampToggle: 'TAMP_TOGGLE',\r\n    setDarkMode: 'SET_DARK_MODE',\r\n    setGeoLocationApproval: 'SET_GEO_LOCATION_APPROVAL',\r\n    setError: 'SET_ERROR'\r\n};\r\n\r\nexport default actionTypes;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { handleActions } from 'redux-actions';\r\nimport types from '../actions/actionTypes';\r\nimport Immutable from 'seamless-immutable';\r\n\r\nconst favoritesCity = localStorage.getItem('favorites');\r\nconst metricPreferences = localStorage.getItem('metricPreferences');\r\nconst darkModePreferences = localStorage.getItem('darkModePreferences');\r\nconst geoLocationApproved = localStorage.getItem('geoLocationApproved');\r\n\r\nconst initialState = Immutable({\r\n    city: { },\r\n    cityDetails: {\r\n        currWeatherInfo: {},\r\n        forecast: [],\r\n    },\r\n    favoriteCities: JSON.parse(favoritesCity) || [],\r\n    metric: JSON.parse(metricPreferences) === null ? true : JSON.parse(metricPreferences),\r\n    darkMode: JSON.parse(darkModePreferences) === null ? true : JSON.parse(darkModePreferences),\r\n    geoLocation: JSON.parse(geoLocationApproved) || false,\r\n    apiError: ''\r\n});\r\n\r\nexport default handleActions({\r\n    [types.setCity]: (state, { value }) => state.setIn(['city'], value),\r\n    [types.setCityDetails]: (state, { key, value }) => state.setIn(['cityDetails', key], value),\r\n    [types.updateFavorites]: (state, { favorites }) => state.set('favoriteCities', favorites),\r\n    [types.tampToggle]: (state, { bool }) => state.setIn(['metric'], bool),\r\n    [types.setDarkMode]: (state, { bool }) => state.setIn(['darkMode'], bool),\r\n    [types.setGeoLocationApproval]: (state, { bool }) => state.setIn(['geoLocation'], bool),\r\n    [types.setError]: (state, { err }) => state.setIn(['apiError'], err),\r\n}, initialState)\r\n","import { combineReducers } from 'redux';\r\nimport mainReducer from \"./reducers/mainReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  mainReducer\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { rootReducer } from './rootReducer';\r\n\r\nconst initialState = {};\r\nconst store = createStore(rootReducer, initialState,\r\n    composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\n\r\nexport default store;\r\n","const cors = 'https://cors-anywhere.herokuapp.com/';\r\nconst url = 'https://dataservice.accuweather.com';\r\nconst weatherUrl = `${cors}${url}`;\r\nconst imageUrl = 'https://developer.accuweather.com/sites/default/files';\r\nconst ERROR_MSG = `Sorry, unable to fetch the weather, maybe it's too cloudy` ;\r\nconst SEARCH_ERROR_MSG = `Sorry, unable to fetch the cities list, maybe it's to cloudy` ;\r\nconst NO_FAV_CITIES_SAVED = 'There are no favorite cities saved yet, go to the home page, ' +\r\n    'search for a city and click the heart to add it to your favorites list';\r\n\r\nconst ROUTES = {\r\n  home: '/home',\r\n  favorites: '/favorites',\r\n};\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY || '2AfPTxkMmqWAYurUBl7M0mlAfYPio14s';\r\n\r\nexport {\r\n  weatherUrl,\r\n  imageUrl,\r\n  ROUTES,\r\n  ERROR_MSG,\r\n  NO_FAV_CITIES_SAVED,\r\n  SEARCH_ERROR_MSG,\r\n  API_KEY\r\n}\r\n\r\n// for testing\r\n// const DEFAULT_LOCATION = { label: 'Tel Aviv', key: '215854', country: 'Israel' };\r\n\r\n\r\n","import types from \"./actionTypes\";\r\nimport store from '../store';\r\n\r\nconst setCity = value => ({\r\n    type: types.setCity,\r\n    value\r\n});\r\n\r\nconst setGeoLocationApproval = bool => {\r\n    localStorage.setItem('geoLocationApproved', JSON.stringify(bool));\r\n    return ({\r\n        type: types.setGeoLocationApproval,\r\n        bool\r\n    })\r\n};\r\n\r\nconst setCityDetails = (key, value) => ({\r\n    type: types.setCityDetails,\r\n    key,\r\n    value\r\n});\r\n\r\nconst setTampMetric = bool => {\r\n    localStorage.setItem('metricPreferences', JSON.stringify(bool));\r\n    return ({\r\n        type: types.tampToggle,\r\n        bool\r\n    })\r\n};\r\n\r\nconst setDarkMode = bool => {\r\n    localStorage.setItem('darkModePreferences', JSON.stringify(bool));\r\n    return ({\r\n        type: types.setDarkMode,\r\n        bool\r\n    })\r\n};\r\n\r\nconst setFavoriteCities = value => {\r\n    const { favoriteCities } = store.getState().mainReducer;\r\n    const newFavList = [...favoriteCities, value];\r\n\r\n    localStorage.setItem('favorites', JSON.stringify(newFavList));\r\n    return ({\r\n        type: types.updateFavorites,\r\n        favorites: newFavList\r\n    })\r\n};\r\n\r\nconst removeFavoriteCity = value => {\r\n    const { favoriteCities } = store.getState().mainReducer;\r\n    const newFavList = favoriteCities.filter((city) => city.key !== value);\r\n\r\n    localStorage.setItem('favorites', JSON.stringify(newFavList));\r\n    return ({\r\n        type: types.updateFavorites,\r\n        favorites: newFavList\r\n    })\r\n};\r\n\r\nconst setError = err => ({\r\n    type: types.setCity,\r\n    err\r\n});\r\n\r\nexport {\r\n    setCity,\r\n    setCityDetails,\r\n    setFavoriteCities,\r\n    removeFavoriteCity,\r\n    setTampMetric,\r\n    setDarkMode,\r\n    setGeoLocationApproval,\r\n    setError\r\n}\r\n","import store from './store';\r\nimport { setCityDetails, setCity, setError } from './actions/mainActions';\r\nimport { weatherUrl, imageUrl, API_KEY } from './consts';\r\nimport { get } from 'lodash';\r\n\r\nasync function fetchCityWeather(key) {\r\n  const response = await fetch(`${weatherUrl}/currentconditions/v1/${key}?apikey=${API_KEY}`);\r\n  const currentWeatherDetails = await response.json();\r\n  const { Message } = currentWeatherDetails;\r\n\r\n  // if (Message) store.dispatch(setError(Message))\r\n\r\n  const { WeatherText, Temperature, WeatherIcon } = currentWeatherDetails[0] || [];\r\n  const weatherImage = WeatherIcon && `${imageUrl}/${WeatherIcon.toString().padStart(2, '0')}-s.png`;\r\n\r\n  return {\r\n    tempC: get(Temperature, ['Metric', 'Value'], ''),\r\n    tempF: get(Temperature, ['Imperial', 'Value'], ''),\r\n    description: WeatherText,\r\n    img: weatherImage,\r\n  }\r\n}\r\n\r\nasync function updateCurrentCityWeather(key) {\r\n  const currWeatherInfo = await fetchCityWeather(key);\r\n\r\n  store.dispatch(setCityDetails('currWeatherInfo', currWeatherInfo))\r\n}\r\n\r\nasync function geoLocationCity() {\r\n  const response = await fetch(`${weatherUrl}/locations/v1/cities/ipaddress?apikey=${API_KEY}`);\r\n  const geo = await response.json();\r\n  const { Message } = geo;\r\n\r\n  // if (Message) store.dispatch(setError(Message))\r\n\r\n  const { ParentCity, Country } = geo || {};\r\n  const { Key, LocalizedName }= ParentCity || {};\r\n  const country = Country.LocalizedName;\r\n  const cityConfig = { label: LocalizedName, key: Key, country };\r\n\r\n  store.dispatch(setCity(cityConfig))\r\n}\r\n\r\nasync function fetchAutoCompleteOptions(value) {\r\n  const response = await fetch(`${weatherUrl}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${value}`);\r\n  const cities = await response.json();\r\n  const { Message } = cities;\r\n\r\n  // if (Message) store.dispatch(setError(Message))\r\n  return cities\r\n}\r\n\r\nasync function fetchForecastDetails(key, metricBool) {\r\n  const response = await fetch(`${weatherUrl}/forecasts/v1/daily/5day/${key}?apikey=${API_KEY}&metric=${metricBool}`);\r\n  const forecast = await response.json();\r\n  const { Message } = forecast;\r\n\r\n  // if (Message) store.dispatch(setError(Message))\r\n\r\n  const { DailyForecasts } = forecast || {};\r\n\r\n  return DailyForecasts.map((day) => ({\r\n    date: day.Date,\r\n    temp: {\r\n      min: get(day.Temperature, ['Minimum', 'Value'], ''),\r\n      max: get(day.Temperature, ['Maximum', 'Value'], ''),\r\n    },\r\n    dayTemp: {\r\n      icon: get(day.Day, ['Icon'], ''),\r\n      text: get(day.Day, ['IconPhrase'], ''),\r\n    },\r\n  }))\r\n}\r\n\r\nasync function updateForecast(key, metricBool) {\r\n  const forecast = await fetchForecastDetails(key, metricBool);\r\n  store.dispatch(setCityDetails('forecast', forecast))\r\n}\r\n\r\nexport {\r\n  fetchCityWeather,\r\n  updateCurrentCityWeather,\r\n  fetchForecastDetails,\r\n  fetchAutoCompleteOptions,\r\n  updateForecast,\r\n  geoLocationCity\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { ROUTES } from '../../consts';\r\nimport { Button } from \"@material-ui/core\";\r\nimport logo from '../../assets/icon/logos/icon.png';\r\nimport { geoLocationCity } from \"../../api\";\r\nimport './style.scss';\r\n\r\nfunction Header(props) {\r\n  const { location: { pathname } } = props;\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const geoLocation = useSelector(state => state.mainReducer.geoLocation);\r\n\r\n  useEffect(() => {\r\n      if (geoLocation !== true) return;\r\n      (async () => {\r\n          try {\r\n              await geoLocationCity();\r\n          }\r\n          catch (e) {\r\n              console.log('geoLocationCity error')\r\n          }\r\n          finally {\r\n              console.log('geoLocationCity set')\r\n          }\r\n      })()\r\n  }, [geoLocation]);\r\n\r\n  return (\r\n      <div className={`header ${!darkMode ? 'header_light_mode' : ''}`}>\r\n          <div className={'logo_wrapper'}>\r\n              <img src={logo} alt={'logo'}/>\r\n              <span className={'logo'}>Sunny</span>\r\n          </div>\r\n          <div className={'app_nav_buttons'}>\r\n              <Link to={ROUTES.home}>\r\n                  <Button\r\n                      variant=\"text\"\r\n                      className={ pathname === ROUTES.home ? 'active' : ''}\r\n                  >\r\n                      Home\r\n                  </Button>\r\n              </Link>\r\n              <Link to={ROUTES.favorites}>\r\n                  <Button\r\n                      variant=\"text\"\r\n                      className={pathname === ROUTES.favorites ? 'active' : ''}\r\n                  >\r\n                      Favorites\r\n                  </Button>\r\n              </Link>\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","//Global Colors variables\r\n\r\n//dark mode colors\r\nconst darkBackground = '#282c34';\r\nconst darkBlue = '#0A84FF';\r\nconst darkGreen = '#30D158';\r\nconst darkIndigo = '#5E5CE6';\r\nconst darkOrange = '#FF9F0A';\r\nconst darkPink = '#FF375F';\r\nconst darkPurple = '#BF5AF2';\r\nconst darkRed = '#FF453A';\r\nconst darkTeal = '#64D2FF';\r\nconst darkYellow = '#FFD60A';\r\n\r\n//light mode colors\r\nconst lightBackground = '#F2F2F7';\r\nconst lightBlue = '#007AFF';\r\nconst lightGreen = '#34C759';\r\nconst lightIndigo = '#5856D6';\r\nconst lightOrange = '#FF9500';\r\nconst lightPink = '#FF2D55';\r\nconst lightPurple = '#AF52DE';\r\nconst lightRed = '#FF3B30';\r\nconst lightTeal = '#5AC8FA';\r\nconst lightYellow = '#FFCC00';\r\n\r\nexport default {\r\n    darkBackground,\r\n    darkBlue,\r\n    darkGreen,\r\n    darkIndigo,\r\n    darkOrange,\r\n    darkPink,\r\n    darkPurple,\r\n    darkRed,\r\n    darkTeal,\r\n    darkYellow,\r\n    lightBackground,\r\n    lightBlue,\r\n    lightGreen,\r\n    lightIndigo,\r\n    lightOrange,\r\n    lightPink,\r\n    lightPurple,\r\n    lightRed,\r\n    lightTeal,\r\n    lightYellow,\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { TextField, CircularProgress } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { SEARCH_ERROR_MSG } from '../../consts';\r\nimport { setCity } from '../../actions/mainActions';\r\nimport { fetchAutoCompleteOptions } from '../../api';\r\nimport colors from '../../styles/colorsVar';\r\nimport './style.scss';\r\n\r\nconst styles = () => ({\r\n    textField: {\r\n        '& fieldset, &:hover fieldset': {\r\n            borderColor: `${colors.darkYellow} !important`,\r\n        },\r\n    },\r\n    invisible: {\r\n        display: 'none',\r\n    },\r\n    paper: {\r\n        backgroundColor: `${colors.lightGreen} !important`,\r\n        '& div:hover': {\r\n            backgroundColor: `${colors.darkYellow} !important`,\r\n        }\r\n    }\r\n});\r\n\r\nconst reg = /^[a-zA-Z ]+(-[a-zA-Z ]+)*$/;\r\n\r\nfunction AutoComplete(props) {\r\n    const { classes } = props;\r\n    const dispatch = useDispatch();\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const [isError, setIsError] = useState(false);\r\n    const [citySearch, setCitySearch] = useState('');\r\n    const loading = open && options.length === 0;\r\n\r\n    async function handleSearchWordChanged(e, value) {\r\n\r\n        setCitySearch(value);\r\n\r\n        if (value.length < 1) {\r\n            return setOpen(false)\r\n        }\r\n        if (value.length < 2 && open) {\r\n            return setOpen(false)\r\n        }\r\n        if (!open) {\r\n            setOpen(true)\r\n        }\r\n        try {\r\n            const cities = await fetchAutoCompleteOptions(value);\r\n            setIsError(false);\r\n            setOptions(cities.map((city) => (\r\n                { label: city.LocalizedName, key: city.Key, country: city.Country.LocalizedName })\r\n            ));\r\n        }\r\n        catch (error) {\r\n            setIsError(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            setOptions([])\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            className={`auto_complete ${!darkMode ? 'light_mode' : ''}`}\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            onChange={(e, value) => {\r\n                if (!value) return;\r\n                dispatch(setCity(value || {}))\r\n            }}\r\n            value={citySearch}\r\n            onInputChange={handleSearchWordChanged}\r\n            getOptionLabel={(option) => option && option.label && `${option.label}, ${option.country}`}\r\n            options={options}\r\n            loading={loading}\r\n            classes={{ popupIndicator: classes.invisible, paper: classes.paper }}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    placeholder=\"Search city\"\r\n                    fullWidth\r\n                    value={citySearch}\r\n                    onChange={(e) => {\r\n                        if (!reg.test(e.target.value)) {\r\n                            return\r\n                        }\r\n                        setCitySearch(citySearch)\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    helperText={isError ? SEARCH_ERROR_MSG : ' '}\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        classes: { root: classes.textField },\r\n                        endAdornment: (\r\n                            <>\r\n                            {loading ? <CircularProgress color=\"primary\" size={20} /> : null}\r\n                            {params.InputProps.endAdornment}\r\n                            </>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(AutoComplete)\r\n","import AutoComplete from './AutoComplete';\r\n\r\nexport default AutoComplete;\r\n","import CurrentWeather from './CurrentWeather';\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { ButtonGroup, Button } from '@material-ui/core';\r\nimport { setTampMetric, setDarkMode } from '../../actions/mainActions';\r\nimport './style.scss';\r\n\r\nexport default function CurrentWeather() {\r\n    const dispatch = useDispatch();\r\n    const city = useSelector(state => state.mainReducer.city);\r\n    const cityDetails = useSelector(state => state.mainReducer.cityDetails);\r\n    const metric = useSelector(state => state.mainReducer.metric);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const { label: cityName, country } = city;\r\n    const { currWeatherInfo } = cityDetails || {};\r\n    const { tempC, tempF, description, img } = currWeatherInfo || {};\r\n    const degree = metric ? tempC : tempF;\r\n\r\n    return (\r\n        <div className={`current_weather_wrapper ${!darkMode ? 'current_weather_light_mode' : ''}`}>\r\n            <div className={'cityName'}>{`${cityName}, ${country}`}</div>\r\n            <div className={'description'}>{description}</div>\r\n            <div className={'temp_icon_wrapper'}>\r\n                {img && <img\r\n                    src={img}\r\n                    alt=\"weather icon\"\r\n                    className={'img'}\r\n                />}\r\n                <div className={'degree'}>\r\n                    {Math.round(degree)}\r\n                    &#176;\r\n                    <span className={'degree_symbol'}>{metric ? 'C' : 'F'}</span>\r\n                </div>\r\n            </div>\r\n            <div className={'set_tamp_type'}>\r\n                <ButtonGroup disableElevation variant=\"contained\">\r\n                    <Button\r\n                        className={`${metric ? 'active' : ''}`}\r\n                        onClick={() => dispatch(setTampMetric(true))}\r\n                    >\r\n                        Celsius\r\n                    </Button>\r\n                    <Button\r\n                        className={`${!metric ? 'active' : ''}`}\r\n                        onClick={() => dispatch(setTampMetric(false))}\r\n                    >\r\n                        Fahrenheit\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n            <div className={'set_dark_mode'}>\r\n                <ButtonGroup disableElevation variant=\"contained\">\r\n                    <Button\r\n                        className={`${darkMode ? 'active' : ''}`}\r\n                        onClick={() => dispatch(setDarkMode(true))}\r\n                    >\r\n                        Dark\r\n                    </Button>\r\n                    <Button\r\n                        className={`${!darkMode ? 'active' : ''}`}\r\n                        onClick={() => dispatch(setDarkMode(false))}\r\n                    >\r\n                        Light\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import WeatherDetails from './WeatherDetails';\r\n\r\nexport default WeatherDetails;\r\n","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fade } from \"react-reveal\";\r\nimport { imageUrl } from '../../consts';\r\nimport './style.scss';\r\n\r\nexport default function WeatherDetails(props) {\r\n    const { dayDetails, currDay, index } = props;\r\n    const metric = useSelector(state => state.mainReducer.metric);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const { temp, dayTemp, date } = dayDetails;\r\n    const { min: minTemp, max: maxTemp } = temp;\r\n\r\n    return (\r\n        <Fade cascade delay={150 * index}>\r\n            <div className={`card_wrapper ${!darkMode ? 'card_light_mode' : ''}`}>\r\n                <div className={`day_name ${currDay ? 'today' : ''}`}>\r\n                    {new Date(date).toString().split(' ')[0]}\r\n                </div>\r\n                <div className={'weather_img'}>\r\n                    <img\r\n                        src={`${imageUrl}/${dayTemp.icon.toString().padStart(2, '0')}-s.png`}\r\n                        alt=\"daily weather icon\"\r\n                        className={'icon'}\r\n                    />\r\n                </div>\r\n                <div className={'day_tamp'}>\r\n                    <span className={'low_tamp_symbol'}>L:</span>\r\n                    {Math.round(minTemp)}\r\n                    &#176;\r\n                    <span className={'tamp_symbol'}>{metric ? 'C' : 'F'}</span>\r\n                    <span className={'high_tamp_symbol'}>H:</span>\r\n                    {Math.round(maxTemp)}\r\n                    &#176;\r\n                    <span className={'tamp_symbol'}>{metric ? 'C' : 'F'}</span>\r\n                </div>\r\n            </div>\r\n        </Fade>\r\n    )\r\n}\r\n\r\n","import Forecast from './Forecast';\r\n\r\nexport default Forecast;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport WeatherDetails from '../WeatherDetails';\r\nimport './style.scss';\r\n\r\nexport default function Forecast() {\r\n    const cityDetails = useSelector(state => state.mainReducer.cityDetails);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n\r\n  return (\r\n      <div className={`forecast_wrapper ${!darkMode ? 'forecast_light_mode' : ''}`}>\r\n          <div className={'cards'}>\r\n              {cityDetails.forecast.map((item, i) => (\r\n                  <WeatherDetails dayDetails={item} key={uuidv4()} currDay={!i} index={i}/>\r\n              ))}\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\nexport default function Rain(level) {\r\n\r\n    function iStyle() {\r\n        const topNum = Math.floor(Math.random() * 2) === 1 ? 1 : -1;\r\n        const randomTopNum = Math.floor(topNum * (Math.random() * 1000));\r\n        const topPx = `${randomTopNum}px`;\r\n        const randomLeftNum = Math.floor(Math.random() * 2000);\r\n        const leftPx = `${randomLeftNum}px`;\r\n\r\n        return { left: leftPx, top: topPx }\r\n    }\r\n\r\n    return (\r\n        <div className='visualisation-container'>\r\n            <div className={`rain_effect ${level === 3 ? 'blnk' : ''}`}>\r\n                {[...Array(50 * level)].map((el, index) => <i key={index} style={iStyle()}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport $ from 'jquery';\r\nimport './style.scss';\r\n\r\nexport default function Lightning() {\r\n\r\n    function lightningStart() {\r\n        // Best viewed in Chrome\r\n// Click anywhere to make your own lightning!\r\n\r\n//=============================\r\n// Consts\r\n//=============================\r\n        const HAS_FLASH = true;\r\n        const TIME_BETWEEN_LIGHTNING = 1000;\r\n\r\n        const MAX_POINTS = 120;\r\n        const MAX_X_DISTANCE = 9; // 10 - 30\r\n        const MAX_Y_DISTANCE = 8; // 10 - 30\r\n        const MAX_WIDTH = 3; // 1 - 10\r\n\r\n        const FADE_INCREMENT = 0.013; // 0 - 0.02\r\n\r\n        const LIGHTNING_CHANCE = 0.03;\r\n        const BRANCH_CHANCE = 0.01;\r\n        const FLICKER_CHANCE = 0.023;\r\n        const BRANCH_BRANCH_CHANCE = 0.90;\r\n\r\n//=============================\r\n// Helpers\r\n//=============================\r\n        const getTimestamp = () => {\r\n            return (new Date()).getTime();\r\n        };\r\n\r\n        const random = (max = 1, unsigned = false) => {\r\n            return unsigned ? ((Math.random() - 0.5) * 2) * max : Math.random() * max;\r\n        };\r\n\r\n//=============================\r\n// Main\r\n//=============================\r\n        const lightningCanvas = document.getElementById('lightning');\r\n        const ctx = lightningCanvas && lightningCanvas.getContext('2d');\r\n        const cloudLightningCanvas = document.getElementById('cloudlightning');\r\n        const clCtx = cloudLightningCanvas && cloudLightningCanvas.getContext('2d');\r\n        const lightningSheetCanvas = document.getElementById('lightningSheet');\r\n        const lsCtx = lightningSheetCanvas && lightningSheetCanvas.getContext('2d');\r\n\r\n        let HAS_CLOUD_EFFECTS = true;\r\n\r\n        let lightning = [];\r\n        let cloudLightning = [];\r\n        let flashes = [];\r\n        let lightningSheets = [];\r\n\r\n        let stageWidth = 0;\r\n        let stageHeight = 0;\r\n        let previousTimestamp = getTimestamp();\r\n\r\n        const loop = () => {\r\n            ctx && ctx.clearRect(0, 0, stageWidth, stageHeight);\r\n            clCtx && clCtx.clearRect(0, 0, stageWidth, stageHeight);\r\n            lsCtx && lsCtx.clearRect(0, 0, stageWidth, stageHeight);\r\n\r\n            lightning.forEach((path) => {\r\n                path.animate();\r\n                path.render();\r\n            });\r\n\r\n            if (HAS_CLOUD_EFFECTS) {\r\n                cloudLightning.forEach((cloud) => {\r\n                    cloud.animate();\r\n                    cloud.render();\r\n                });\r\n\r\n                lightningSheets.forEach((lightningSheet) => {\r\n                    lightningSheet.animate();\r\n                    lightningSheet.render();\r\n                });\r\n            } else {\r\n                cloudLightning.forEach(cloud => cloud.alpha = 0)\r\n                lightningSheets.forEach(cloud => cloud.alpha = 0)\r\n            }\r\n\r\n            if (HAS_FLASH) {\r\n                flashes.forEach((path) => {\r\n                    path.animate();\r\n                    path.render();\r\n                });\r\n            }\r\n\r\n            // create lightning or lightning sheet\r\n            if (\r\n                random() < LIGHTNING_CHANCE &&\r\n                getTimestamp() - previousTimestamp > TIME_BETWEEN_LIGHTNING\r\n            ) {\r\n\r\n                if (random() > 0.4) {\r\n                    lightning.push(new Lightning());\r\n                } else {\r\n                    lightningSheets.push(new LightningSheet());\r\n                }\r\n\r\n                previousTimestamp = getTimestamp();\r\n            }\r\n\r\n            lightning = lightning.filter(path => path.alpha > 0);\r\n            cloudLightning = cloudLightning.filter(cloud => cloud.alpha > 0);\r\n            flashes = flashes.filter(sheet => sheet.alpha > 0);\r\n            lightningSheets = lightningSheets.filter(sheet => sheet.alpha > 0);\r\n\r\n            requestAnimationFrame(loop);\r\n        };\r\n\r\n        class Lightning {\r\n\r\n            constructor(ox, oy, width, isBranch = false, branchDirection) {\r\n                const x = ox || (random(stageWidth));\r\n                const y = oy || (40 + random(100));\r\n                let newCloud;\r\n\r\n                this.paths = [];\r\n                this.red = 255;\r\n                this.green = 255;\r\n                this.blue = 255;\r\n                this.alpha = 1;\r\n                this.hasEnded = false;\r\n                this.width = width || random(MAX_WIDTH) + 1;\r\n                this.isBranch = isBranch;\r\n                this.xDeviation = isBranch ? 1.3 : 1;\r\n                this.branchDirection = branchDirection || (Math.random() - 0.5) * 2;\r\n                this.flickerCount = 0;\r\n                this.clouds = [];\r\n\r\n                this.paths.push({\r\n                    x,\r\n                    y\r\n                });\r\n\r\n                if (HAS_FLASH) {\r\n                    flashes.push(new Flash(this.width));\r\n                }\r\n\r\n                if (!this.isBranch) {\r\n                    newCloud = new CloudLightning(x, y, this.width);\r\n                    cloudLightning.push(newCloud);\r\n                    this.clouds.push(newCloud);\r\n                }\r\n\r\n                if (this.isBranch) {\r\n                    this.width = 1;\r\n                }\r\n            }\r\n\r\n            animate() {\r\n                const newLines = 3 + random(5);\r\n                const branchChance = this.isBranch ? BRANCH_BRANCH_CHANCE : BRANCH_CHANCE;\r\n\r\n                if (!this.hasEnded) {\r\n                    const previousPoint = this.getLastPoint();\r\n                    let lastX = previousPoint.x;\r\n                    let lastY = previousPoint.y;\r\n                    let newX, newY;\r\n                    let xDirection;\r\n\r\n                    // add new extensions\r\n                    for (let i = 0; i < newLines; i++) {\r\n                        xDirection = (this.isBranch ? this.branchDirection : (Math.random() - 0.5) * 2);\r\n                        newX = lastX + xDirection * MAX_X_DISTANCE * this.xDeviation;\r\n                        newY = lastY + random(MAX_Y_DISTANCE) + 2;\r\n\r\n                        lastX = newX;\r\n                        lastY = newY;\r\n                        this.paths.push({\r\n                            x: newX,\r\n                            y: newY\r\n                        });\r\n\r\n                        if (this.isBranch && random() < 0.03) {\r\n                            lightning.push(new Lightning(lastX, lastY, this.width, true));\r\n                        }\r\n                    }\r\n\r\n                    // when to stop extending\r\n                    this.hasEnded =\r\n                        lastY / stageHeight > 0.8 ||\r\n                        (random() > 0.6 && this.paths.length > MAX_POINTS * 3/4) ||\r\n                        this.paths.length > MAX_POINTS ||\r\n                        (this.isBranch && this.paths.length > 5)\r\n                    ;\r\n\r\n                    // create branches\r\n                    if (\r\n                        random() > branchChance &&\r\n                        this.paths.length > 5 &&\r\n                        this.paths.length < MAX_POINTS * 2/3\r\n                    ) {\r\n                        lightning.push(new Lightning(lastX, lastY, this.width, true));\r\n                    }\r\n                }\r\n\r\n                // fade out\r\n                if (this.alpha > 0) {\r\n                    this.alpha -= FADE_INCREMENT;\r\n\r\n                    // fade out purple\r\n                    if (this.alpha < 0.5) {\r\n                        this.green -= 4.5;\r\n                    }\r\n\r\n                    if (this.isBranch) {\r\n                        this.alpha -= FADE_INCREMENT / 2;\r\n                    }\r\n                }\r\n\r\n                // cool flicker\r\n                if (\r\n                    !this.isBranch &&\r\n                    random() < FLICKER_CHANCE &&\r\n                    this.flickerCount < 2 &&\r\n                    this.alpha > 0.3\r\n                ) {\r\n                    this.alpha = 1;\r\n                    this.green = 240;\r\n                    this.flickerCount++;\r\n\r\n                    this.clouds.map((cloud) => {\r\n                        cloud.alpha = random(0.6) + 0.3;\r\n                        return cloud.alpha;\r\n                    });\r\n                }\r\n\r\n                if (\r\n                    (this.isBranch && (this.flickerCount > 0)) ||\r\n                    this.alpha < 0\r\n                ) {\r\n                    this.alpha = 0;\r\n                }\r\n            }\r\n\r\n            render() {\r\n                const colour = this.getColour();\r\n\r\n                ctx && ctx.beginPath();\r\n                ctx && (ctx.strokeStyle = colour);\r\n                ctx && (ctx.lineWidth = this.width);\r\n\r\n                if (this.flickerCount === 0) {\r\n                    ctx && (ctx.shadowBlur = this.width * 3);\r\n                    ctx && (ctx.shadowColor = colour);\r\n                }\r\n\r\n                this.paths.forEach((path) => {\r\n                    ctx && ctx.lineTo(path.x, path.y);\r\n                });\r\n\r\n                ctx && ctx.stroke();\r\n            }\r\n\r\n            getColour(red, green, blue, alpha) {\r\n                return `rgba(${red || this.red}, ${green || this.green}, ${blue || this.blue}, ${alpha || this.alpha})`;\r\n            }\r\n\r\n            getLastPoint() {\r\n                if (this.paths.length > 0) {\r\n                    const lastPoint = this.paths[this.paths.length - 1];\r\n\r\n                    return {\r\n                        x: lastPoint.x,\r\n                        y: lastPoint.y\r\n                    };\r\n                } else {\r\n                    return {x: 0, y: 0};\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        class Flash {\r\n\r\n            constructor(flash = 1) {\r\n                this.alpha = 0.09 * flash;\r\n            }\r\n\r\n            animate() {\r\n                this.alpha -= FADE_INCREMENT * 2;\r\n            }\r\n\r\n            render() {\r\n                ctx && ctx.beginPath();\r\n                ctx && (ctx.fillStyle = `rgba(50, 48, 51, ${this.alpha})`);\r\n                ctx && ctx.fillRect(0, 0, stageWidth, stageHeight);\r\n            }\r\n\r\n        }\r\n\r\n        class LightningSheet {\r\n\r\n            constructor(x, y, isRoot = true) {\r\n                this.alpha = random(0.6) + 0.2;\r\n                this.x = x || random(stageWidth);\r\n                this.y = y || random(stageHeight * 0.6) - 100;\r\n                this.size = random(50) + 40;\r\n\r\n                // size proportionately to the horizon to create perspective\r\n                this.size = (1 - (this.y / stageHeight * 0.6)) * this.size;\r\n\r\n                if (isRoot) {\r\n                    let sheetX, sheetY;\r\n\r\n                    for (let i = 0; i < random(12) + 4; i++) {\r\n                        sheetX = this.x + random(300, true);\r\n                        sheetY = this.y + random(80, true);\r\n                        lightningSheets.push(new LightningSheet(sheetX, sheetY, false));\r\n                    }\r\n                }\r\n            }\r\n\r\n            animate() {\r\n                this.alpha -= FADE_INCREMENT * 0.8;\r\n\r\n                if (\r\n                    this.alpha < 0.3 &&\r\n                    random() < 0.025\r\n                ) {\r\n                    this.alpha += random(0.4);\r\n                }\r\n            }\r\n\r\n            render() {\r\n                lsCtx && lsCtx.save();\r\n\r\n                lsCtx && lsCtx.scale(2, 1);\r\n\r\n                lsCtx && lsCtx.beginPath();\r\n                lsCtx && lsCtx.arc(this.x / 2, this.y, this.size, 2 * Math.PI, false);\r\n                lsCtx && lsCtx.closePath();\r\n                lsCtx && lsCtx.restore();\r\n\r\n                lsCtx && (lsCtx.filter = `blur(${this.size}px)`);\r\n                lsCtx && (lsCtx.fillStyle = `rgba(100, 100, 100, ${this.alpha})`);\r\n                lsCtx && lsCtx.fill();\r\n                lsCtx && (lsCtx.shadowColor = '#999999');\r\n                lsCtx && (lsCtx.shadowBlur = this.size);\r\n            }\r\n        }\r\n\r\n        class CloudLightning {\r\n\r\n            constructor(x, y, size) {\r\n                this.x = x;\r\n                this.y = y;\r\n                this.size = size * 3 * random(2) + 10;\r\n                this.alpha = 1;\r\n            }\r\n\r\n            animate() {\r\n                this.alpha -= FADE_INCREMENT;\r\n            }\r\n\r\n            render() {\r\n                clCtx && clCtx.save();\r\n\r\n                clCtx && clCtx.scale(2.5, 1);\r\n\r\n                clCtx && clCtx.beginPath();\r\n                clCtx && clCtx.arc(this.x / 2.5, this.y, this.size, 2 * Math.PI, false);\r\n                clCtx && clCtx.restore();\r\n\r\n                clCtx && (clCtx.filter = `blur(${this.size}px)`);\r\n                clCtx && (clCtx.fillStyle = `rgba(255, 255, 255, ${this.alpha})`);\r\n                clCtx && clCtx.fill();\r\n                clCtx && (clCtx.shadowColor = '#eeeeff');\r\n                clCtx && (clCtx.shadowBlur = (this.size * 8) + 50);\r\n            }\r\n\r\n        }\r\n\r\n//=============================\r\n// Setup\r\n//=============================\r\n\r\n        const updateCanvasSize = () => {\r\n            stageWidth = window.innerWidth;\r\n            stageHeight = window.innerHeight;\r\n\r\n            lightningCanvas && (lightningCanvas.width = stageWidth);\r\n            lightningCanvas && (lightningCanvas.height = stageHeight);\r\n\r\n            cloudLightningCanvas && (cloudLightningCanvas.width = stageWidth);\r\n            cloudLightningCanvas && (cloudLightningCanvas.height = stageHeight);\r\n\r\n            lightningSheetCanvas && (lightningSheetCanvas.width = stageWidth);\r\n            lightningSheetCanvas && (lightningSheetCanvas.height = stageHeight * 0.8);\r\n        };\r\n\r\n        $(window).on('mousedown', (e) => {\r\n            lightning.push(new Lightning(e.clientX, e.clientY));\r\n        });\r\n\r\n        updateCanvasSize();\r\n        $(window).resize(updateCanvasSize);\r\n\r\n//=============================\r\n// Run it!\r\n//=============================\r\n\r\n        lightning.push(new Lightning(400, 100));\r\n        loop();\r\n    }\r\n\r\n    lightningStart();\r\n\r\n    return (\r\n        <Fragment>\r\n            <canvas id=\"lightning\"/>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport RainEffect from \"../RainEffect\";\r\nimport LightningEffect from \"../Lightning\";\r\nimport './style.scss';\r\n\r\nexport default function WeatherIcon(props) {\r\n    const { weatherDescription } = props;\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const lightMode = !darkMode ? 'weather_icon_light_mode' : '';\r\n\r\n    switch (weatherDescription) {\r\n        case 'Hazy Sunshine':\r\n        case 'Intermittent Clouds':\r\n        case 'Cloudy':\r\n        case 'Mostly cloudy':\r\n        case 'Dreary (Overcast)':\r\n        case 'Flurries':\r\n        case 'Mostly Cloudy w/ Flurries':\r\n        case 'Partly Sunny w/ Flurries' :\r\n        case 'Windy':\r\n        case 'Fog': {\r\n\r\n            return <div className={`weather_icon cloudy ${lightMode}`}>\r\n                <div className=\"cloud\"/>\r\n                <div className=\"cloud\"/>\r\n            </div>\r\n        }\r\n        case 'Showers':\r\n        case 'Rain':\r\n        case 'Light rain':\r\n        case 'Sleet':\r\n        case 'Freezing Rain':\r\n        case 'Partly Cloudy w/ Showers': {\r\n            return <Fragment>\r\n                {RainEffect(2)}\r\n                <div className={`weather_icon rainy ${lightMode}`}>\r\n                    <div className=\"cloud\"/>\r\n                    <div className=\"rain\"/>\r\n                </div>\r\n            </Fragment>\r\n        }\r\n        case 'Mostly Cloudy w/ Showers':\r\n        case 'Partly Sunny w/ Showers': {\r\n            return <Fragment>\r\n                {RainEffect(1)}\r\n                <div className={`weather_icon sun-shower ${lightMode}`}>\r\n                    <div className=\"cloud\"/>\r\n                    <div className=\"sun\">\r\n                        <div className=\"rays\"/>\r\n                    </div>\r\n                    <div className=\"rain\"/>\r\n                </div>\r\n            </Fragment>\r\n        }\r\n        case 'T-Storms':\r\n        case 'Thunderstorm':\r\n        case 'Mostly Cloudy w/ T-Storms':\r\n        case 'Partly Sunny w/ T-Storms': {\r\n            return <Fragment>\r\n                {RainEffect(3)}\r\n                {LightningEffect()}\r\n                <div className={`weather_icon thunder-storm ${lightMode}`}>\r\n                    <div className=\"cloud\"/>\r\n                    <div className=\"lightning\">\r\n                        <div className=\"bolt\"/>\r\n                        <div className=\"bolt\"/>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        }\r\n        case 'Ice':\r\n        case 'Snow':\r\n        case 'Rain and Snow':\r\n        case 'Mostly Cloudy w/ Snow': {\r\n            return <div className={`weather_icon flurries ${lightMode}`}>\r\n                <div className=\"cloud\"/>\r\n                <div className=\"snow\">\r\n                    <div className=\"flake\"/>\r\n                    <div className=\"flake\"/>\r\n                </div>\r\n            </div>\r\n        }\r\n        default: {\r\n            return <div className={`weather_icon sunny ${lightMode}`}>\r\n                <div className=\"sun\">\r\n                    <div className=\"rays\"/>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n","import HomePage from './HomePage';\r\n\r\nexport default HomePage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CircularProgress, Button } from '@material-ui/core';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport { setFavoriteCities, removeFavoriteCity } from '../../actions/mainActions';\r\nimport { updateCurrentCityWeather, updateForecast, fetchAutoCompleteOptions } from '../../api';\r\nimport { ERROR_MSG } from '../../consts';\r\nimport AutoComplete from '../AutoComplete';\r\nimport CurrentWeather from '../CurrentWeather';\r\nimport Forecast from '../Forecast';\r\nimport WeatherIcon from '../UI/WeatherIcons';\r\nimport RainEffect from '../UI/RainEffect';\r\nimport LightningEffect from '../UI/Lightning';\r\nimport './style.scss';\r\n\r\nexport default function HomePage() {\r\n    const dispatch = useDispatch();\r\n    const city = useSelector(state => state.mainReducer.city);\r\n    const cityDetails = useSelector(state => state.mainReducer.cityDetails);\r\n    const favoriteCities = useSelector(state => state.mainReducer.favoriteCities);\r\n    const metric = useSelector(state => state.mainReducer.metric);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const { key = '', label } = city;\r\n    const [isLoader, setIsLoader] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!key) return;\r\n        (async () => {\r\n            try {\r\n                setIsLoader(true);\r\n                await updateForecast(key, metric);\r\n                setIsError(false)\r\n            }\r\n            catch (e) {\r\n                setIsError(true)\r\n            }\r\n            finally {\r\n                setIsLoader(false)\r\n            }\r\n        })()\r\n    }, [metric, key]);\r\n\r\n    function getCityWeather() {\r\n        if (!key) return;\r\n        (async () => {\r\n            try {\r\n                setIsLoader(true);\r\n                await fetchAutoCompleteOptions(label);\r\n                await updateCurrentCityWeather(key);\r\n                await updateForecast(key, metric);\r\n                setIsError(false)\r\n            }\r\n            catch (e) {\r\n                setIsError(true)\r\n            }\r\n            finally {\r\n                setIsLoader(false)\r\n            }\r\n        })()\r\n    }\r\n\r\n    useEffect(getCityWeather, [key]);\r\n\r\n    function renderWeatherBody() {\r\n        if (isLoader) {\r\n            return <div className={'loader'}>\r\n                <CircularProgress/>\r\n            </div>\r\n        }\r\n        if (isError) {\r\n            return (\r\n                <div className={'error_wrapper'}>\r\n                    <div className={'error_msg'}>{ERROR_MSG}</div>\r\n                    <Button\r\n                        variant=\"text\"\r\n                        onClick={getCityWeather}\r\n                    >\r\n                        Try again\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }\r\n        return [\r\n            <CurrentWeather key='currentWeather'/>,\r\n            <Forecast key='forecast'/>,\r\n        ]\r\n    }\r\n\r\n    function renderFavoriteIcon() {\r\n        const isCityInFav = !!favoriteCities.find(favCity => favCity.key === city.key);\r\n\r\n        return isError ? null\r\n            : isCityInFav\r\n                ? <Favorite\r\n                    className={`favorite_icon favorite`}\r\n                    onClick={() => {\r\n                        if (!isCityInFav) {\r\n                            dispatch(setFavoriteCities(city))\r\n                        }\r\n                        else {\r\n                            dispatch(removeFavoriteCity(key))\r\n                        }\r\n                    }}\r\n                />\r\n                : <FavoriteBorderIcon\r\n                    className={`favorite_icon`}\r\n                    onClick={() => {\r\n                        if (!isCityInFav) {\r\n                            dispatch(setFavoriteCities(city))\r\n                        }\r\n                        else {\r\n                            dispatch(removeFavoriteCity(key))\r\n                        }\r\n                    }}\r\n                />\r\n    }\r\n\r\n    const weatherDescription = cityDetails.currWeatherInfo.description;\r\n\r\n    return (\r\n        <div className={`home_page ${!darkMode ? 'home_page_light_mode' : ''}`}>\r\n            <AutoComplete/>\r\n            {renderFavoriteIcon()}\r\n            <div className={`city_weather_wrapper`}>\r\n                {renderWeatherBody()}\r\n                {!isError && !isLoader && <WeatherIcon weatherDescription={weatherDescription}/>}\r\n            </div>\r\n            {isError && <div className={'storm'}>\r\n                {RainEffect(3)}\r\n                {LightningEffect()}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import Favorites from './Favorites';\r\n\r\nexport default Favorites;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\r\nimport { CircularProgress, Button } from '@material-ui/core';\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport { setCity, removeFavoriteCity } from '../../actions/mainActions';\r\nimport { fetchCityWeather } from '../../api';\r\nimport { ROUTES, ERROR_MSG, NO_FAV_CITIES_SAVED } from '../../consts';\r\nimport { Fade } from \"react-reveal\";\r\nimport RainEffect from '../UI/RainEffect';\r\nimport LightningEffect from '../UI/Lightning';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport './style.scss';\r\n\r\nexport default function Favorites(props) {\r\n    const dispatch = useDispatch();\r\n    const favoriteCities = useSelector(state => state.mainReducer.favoriteCities);\r\n    const metric = useSelector(state => state.mainReducer.metric);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const [isLoader, setIsLoader] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    const [favCitiesInfo, setFavCitiesInfo] = useState({});\r\n\r\n    function handleCityClick(city) {\r\n        dispatch(setCity(city));\r\n        props.history.push(ROUTES.home)\r\n    }\r\n\r\n    function getCityWeather() {\r\n        (async () => {\r\n            try {\r\n                setIsLoader(true);\r\n                const cities = await Promise.all(favoriteCities.map((city) => fetchCityWeather(city.key, metric)));\r\n                const citiesInfo = cities.reduce((acc, info, i) => ({\r\n                    ...acc,\r\n                    [favoriteCities[i].key]: info,\r\n                }), {});\r\n\r\n                if (favoriteCities.length && !Object.keys(citiesInfo).length) {\r\n                    throw new Error()\r\n                }\r\n                setFavCitiesInfo(citiesInfo);\r\n                setIsError(false)\r\n            }\r\n            catch (e) {\r\n                setIsError(true)\r\n            }\r\n            finally {\r\n                setIsLoader(false)\r\n            }\r\n        })()\r\n    }\r\n\r\n    useEffect(getCityWeather, []);\r\n\r\n    function renderNoFavorites() {\r\n        return (\r\n            <div className={'no_favorites_container'}>\r\n                <span>{NO_FAV_CITIES_SAVED}</span>\r\n                <Pulse forever duration={750}>\r\n                    <FavoriteBorderIcon className={`favorite_icon`}/>\r\n                </Pulse>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderCities() {\r\n        if (!favoriteCities.length) {\r\n            return renderNoFavorites()\r\n        }\r\n\r\n        return favoriteCities.map((city, index) => {\r\n            const tamp = metric ? favCitiesInfo[city.key].tempC : favCitiesInfo[city.key].tempF;\r\n\r\n            return <Fade cascade delay={200 * index} key={city.key}>\r\n                <div key={city.key} className={`fav_city_container`}>\r\n                    <div\r\n                        className={'city_details'}\r\n                        role=\"button\"\r\n                        tabIndex={0}\r\n                        onClick={() => handleCityClick(city)}\r\n                    >\r\n                        <div className={'city_name'}>\r\n                            {city.label}\r\n                        </div>\r\n                        <div className={'temp'}>\r\n                            {Math.round(tamp)}\r\n                            &#176;\r\n                            <span className={'tamp_symbol'}>{metric ? 'C' : 'F'}</span>\r\n                        </div>\r\n                        <div className={'description'}>\r\n                            {favCitiesInfo[city.key].description}\r\n                        </div>\r\n                    </div>\r\n                    {favCitiesInfo[city.key].img && (\r\n                        <div className={'fav_weather_img'}>\r\n                            <img\r\n                                src={favCitiesInfo[city.key].img}\r\n                                alt=\"weather icon\"\r\n                                className={'img'}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <div className={'remove_icon_wrapper'}>\r\n                        <DeleteIcon\r\n                            className={'remove_icon'}\r\n                            onClick={() => {\r\n                                dispatch(removeFavoriteCity(city.key))\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Fade>\r\n        })\r\n    }\r\n\r\n    function renderFavBody() {\r\n        if (isLoader) {\r\n            return <CircularProgress className={'loader'} />\r\n        }\r\n        if (isError) {\r\n            return (\r\n                <div className={'error_wrapper'}>\r\n                    <div className={'error_msg'}>{ERROR_MSG}</div>\r\n                    <Button\r\n                        variant=\"text\"\r\n                        onClick={getCityWeather}\r\n                    >\r\n                        Try again\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }\r\n        return renderCities()\r\n    }\r\n\r\n    return (\r\n        <div className={`favorites_wrapper ${!darkMode ? 'favorites_light_mode' : ''}`}>\r\n            {renderFavBody()}\r\n            {isError && <div className={'storm'}>\r\n                {RainEffect(3)}\r\n                {LightningEffect()}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button } from \"@material-ui/core\";\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport './style.scss';\r\n\r\nexport default function Header(props) {\r\n    const { text, btnText, onClick } = props;\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n\r\n    return (\r\n        <div className={`message_wrapper ${!darkMode ? 'message_light_mode' : ''}`}>\r\n            <Pulse>\r\n                <div className={'msg'}>{text}</div>\r\n            </Pulse>\r\n            <div className={'message_button_wrapper'}>\r\n                <Pulse>\r\n                    <Button\r\n                        variant=\"text\"\r\n                        onClick={() => onClick()}\r\n                    >\r\n                        {btnText}\r\n                    </Button>\r\n                </Pulse>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import WeatherApp from './WeatherApp';\r\n\r\nexport default WeatherApp;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { ROUTES } from '../../consts';\r\nimport { setGeoLocationApproval } from '../../actions/mainActions';\r\nimport Header from '../../components/Header';\r\nimport HomePage from '../../components/HomePage';\r\nimport Favorites from '../../components/Favorites';\r\nimport Message from \"../../components/UI/Message/Message\";\r\nimport './style.scss';\r\n\r\nexport default function WeatherApp() {\r\n    const dispatch = useDispatch();\r\n    const geoLocation = useSelector(state => state.mainReducer.geoLocation);\r\n    const darkMode = useSelector(state => state.mainReducer.darkMode);\r\n    const messageText = 'Sunny want to know your location, can we?';\r\n\r\n    return (\r\n        <div className={`weather_container ${!darkMode ? 'weather_container_light_mode' : ''}`}>\r\n            <Header/>\r\n            {geoLocation !== true\r\n                ? <Message text={messageText} btnText={'Approve'} onClick={() => dispatch(setGeoLocationApproval(true))}/>\r\n                : <Switch>\r\n                    <Route exect path={ROUTES.home} component={HomePage}/>\r\n                    <Route exect path={ROUTES.favorites} component={Favorites}/>\r\n                    <Route path='/' render={() => <Redirect to=\"/home\"/>}/>\r\n            </Switch>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport WeatherApp from \"./containers/WeatherApp\";\nimport './App.scss';\n\nexport default function App() {\n  return (\n      <Router>\n          <div className=\"App\">\n              <WeatherApp/>\n          </div>\n      </Router>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.9118e9d8.png\";"],"sourceRoot":""}